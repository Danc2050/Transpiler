// basic file operations
#include <iostream>
#include <fstream>
#include <iostream>

#include <string.h>
using std::cout;
using std::endl;
using namespace std;

int keywordSearch(int argc, char * argv[]){
	/*
	   This will search through our tokenized input (from cmdline) and do actions based on the keywords sensed

*/
	ofstream f;
	int i = 0;
	char * functions[100];  // 100 functions/methods, including constructors/destructors
	char * tmp = "";
	while(i < argc){
		cout << "arg[" << i << "]: " << argv[i] << endl;
		if(strcmp(argv[i], "IN") == 0){ // File creation
			f.open (argv[i+1]);
			//f << argv[i+1];
		}
		if(strcmp(argv[i], "CREATE") == 0){ // Class creation
			f << "class " <<argv[i+1]<< "{\n";
			f << "public:\n ";
			f << "int " <<argv[i+1]<<"();\n";// Constructor
			f << "int ~"<<argv[i+1]<<"();\n";// Destructor
			tmp = *argv[i+1];
			functions = *tmp;
		}
		if(strcmp(argv[i], "SHOULD") == 0){ // Method creation
			f << "public:"<<endl;
			while(strcmp(argv[i+1], ".") != 0){ // "." delimiter to stop
				f <<"int " << argv[i+1]<< "();\n";
				++i;
			}
		}
		if(strcmp(argv[i], "WITH") == 0){ // Data creation
			f << "private:"<<endl;
			while(strcmp(argv[i+1], ".") != 0){ // "." delimiter to stop
				f <<"int " << argv[i+1]<< "();\n"; // TODO Default is int...
				++i;
			}
			return 0;
		}
		++i;
	}
	f.close();
}


int main (int argc, char *argv[]) {
	cout << "Arguments' count=%d" << argc << endl;

	// First argument is ALWAYS the command itself
	cout << "Command: " << argv[0] << endl;

	// For additional arguments we start from argv[1] and continue (if any)
	keywordSearch(argc, argv);
	//for (int i = 1; i < argc; i++) {
	/*
	   int i = 0;
	   while(i != argc){
	   cout << "arg[" << i << "]: " << argv[i] << endl;
	   ++i;
	   }
	   */
	return 0;
}
/*
// SRC: https://www.geeksforgeeks.org/tokenizing-a-string-cpp/
// Tokenizing a string using stringstream 
#include <bits/stdc++.h> 

using namespace std; 

int main(int argc, char **argv[])
{ 

string line = "GeeksForGeeks is a must try"; 

// Vector of string to save tokens 
vector <string> tokens; 

// stringstream class check1 
stringstream check1(line); 

string intermediate; 

// Tokenizing w.r.t. space ' ' 
while(getline(check1, intermediate, ' ')) 
{ 
tokens.push_back(intermediate); 
} 

// Printing the token vector 
for(int i = 0; i < tokens.size(); i++) 
cout << tokens[i] << '\n'; 
} 
*/
